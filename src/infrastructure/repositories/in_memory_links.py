from use_cases import ConversationLinkRepository
from domain.models import ConversationLink, MessageLink
import logging


class InMemoryConversationLinkRepository(ConversationLinkRepository):
	def __init__(self):
		self._links: dict[str, str] = {}  # amocrm_chat_id <-> edna_conversation_id
		self._phones: dict[str, str] = {}  # amocrm_chat_id -> phone_number

	async def get_edna_conversation_id(self, amocrm_chat_id: str) -> str | None:
		return self._links.get(amocrm_chat_id)

	async def get_amocrm_chat_id(self, edna_conversation_id: str) -> str | None:
		# –î–ª—è –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
		for amocrm_id, edna_id in self._links.items():
			if edna_id == edna_conversation_id:
				return amocrm_id
		return None

	async def get_phone_by_chat_id(self, amocrm_chat_id: str) -> str | None:
		"""–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ ID —á–∞—Ç–∞ AmoCRM"""
		return self._phones.get(amocrm_chat_id)

	async def save_link(self, link: ConversationLink) -> None:
		self._links[link.amocrm_chat_id] = link.edna_conversation_id

	async def save_phone_for_chat(self, amocrm_chat_id: str, phone_number: str) -> None:
		"""–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ AmoCRM"""
		self._phones[amocrm_chat_id] = phone_number


class InMemoryMessageLinkRepository:
	def __init__(self):
		self._links: dict[str, MessageLink] = {}  # source_message_id -> MessageLink
		self._logger = logging.getLogger("message_links_repo")

	async def get_link_by_source_id(self, source_message_id: str) -> MessageLink | None:
		link = self._links.get(source_message_id)
		self._logger.debug(
			"–ü–æ–∏—Å–∫ —Å–≤—è–∑–∏ –ø–æ source_message_id=%s: –Ω–∞–π–¥–µ–Ω–æ=%s",
			source_message_id, link is not None
		)
		if link:
			self._logger.debug(
				"–ù–∞–π–¥–µ–Ω–Ω–∞—è —Å–≤—è–∑—å: source_provider=%s, source_id=%s -> target_provider=%s, target_id=%s",
				link.source_provider, link.source_message_id, link.target_provider, link.target_message_id
			)
		else:
			self._logger.debug("–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π: %d", len(self._links))
			if self._links:
				self._logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ source_ids: %s", list(self._links.keys())[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
		return link

	async def save_link(self, link: MessageLink) -> None:
		self._logger.info(
			"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å: source_provider=%s, source_id=%s -> target_provider=%s, target_id=%s",
			link.source_provider, link.source_message_id, link.target_provider, link.target_message_id
		)
		self._links[link.source_message_id] = link
		self._logger.debug("–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %d", len(self._links))