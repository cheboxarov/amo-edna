#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ error –æ—Ç—á–µ—Ç–æ–≤.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤.
"""

import json
import sys
from pathlib import Path
from datetime import datetime, timedelta
from typing import List, Dict, Any


class ErrorReportsViewer:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ error –æ—Ç—á–µ—Ç–æ–≤"""

    def __init__(self, logs_dir: Path = Path("logs")):
        self.logs_dir = logs_dir
        self.errors_log = logs_dir / "errors.log"
        self.errors_json = logs_dir / "errors.json"

    def get_recent_errors(self, hours: int = 24) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        errors = []
        cutoff_time = datetime.now() - timedelta(hours=hours)

        # –ß–∏—Ç–∞–µ–º JSON –æ—à–∏–±–∫–∏
        if self.errors_json.exists():
            try:
                with open(self.errors_json, 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.strip():
                            try:
                                error_data = json.loads(line.strip())
                                error_time = datetime.fromisoformat(error_data['timestamp'].replace('Z', '+00:00'))
                                if error_time > cutoff_time:
                                    errors.append(error_data)
                            except json.JSONDecodeError:
                                continue
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        errors.sort(key=lambda x: x['timestamp'], reverse=True)
        return errors

    def print_error_summary(self, hours: int = 24) -> None:
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –ø–æ –æ—à–∏–±–∫–∞–º"""
        errors = self.get_recent_errors(hours)

        if not errors:
            print(f"‚úÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        print(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:")
        print("=" * 80)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        error_types = {}
        for error in errors:
            error_type = error.get('level', 'UNKNOWN')
            if error_type not in error_types:
                error_types[error_type] = []
            error_types[error_type].append(error)

        for error_type, type_errors in error_types.items():
            print(f"\nüî¥ {error_type}: {len(type_errors)} –æ—à–∏–±–æ–∫")

            for error in type_errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                timestamp = error.get('timestamp', 'UNKNOWN')
                logger = error.get('logger', 'UNKNOWN')
                message = error.get('message', 'No message')[:100]

                print(f"  üìÖ {timestamp}")
                print(f"  üìç {logger}")
                print(f"  üí¨ {message}")
                print()

        if len(errors) > 5:
            print(f"... –∏ –µ—â—ë {len(errors) - 5} –æ—à–∏–±–æ–∫")

    def print_detailed_error(self, error_index: int = 0, hours: int = 24) -> None:
        """–í—ã–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ"""
        errors = self.get_recent_errors(hours)

        if not errors:
            print("–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        if error_index >= len(errors):
            print(f"–ò–Ω–¥–µ–∫—Å {error_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫.")
            return

        error = errors[error_index]

        print("üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–®–ò–ë–ö–ï")
        print("=" * 80)

        for key, value in error.items():
            if key == 'exception' and value:
                print(f"{key.upper()}:")
                print(f"  {value}")
            else:
                print(f"{key.upper()}: {value}")

    def show_help(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        print("üìä –ü–†–û–°–ú–û–¢–† ERROR –û–¢–ß–ï–¢–û–í")
        print("=" * 50)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python view_error_reports.py summary [—á–∞—Å—ã]  - —Å–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫")
        print("  python view_error_reports.py detail [–∏–Ω–¥–µ–∫—Å] [—á–∞—Å—ã]  - –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞")
        print("  python view_error_reports.py help  - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python view_error_reports.py summary        # –æ—à–∏–±–∫–∏ –∑–∞ 24 —á–∞—Å–∞")
        print("  python view_error_reports.py summary 6      # –æ—à–∏–±–∫–∏ –∑–∞ 6 —á–∞—Å–æ–≤")
        print("  python view_error_reports.py detail 0      # –ø–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞")
        print("  python view_error_reports.py detail 1 12   # –≤—Ç–æ—Ä–∞—è –æ—à–∏–±–∫–∞ –∑–∞ 12 —á–∞—Å–æ–≤")


def main():
    viewer = ErrorReportsViewer()

    if len(sys.argv) < 2:
        viewer.print_error_summary()
        return

    command = sys.argv[1].lower()

    if command == "summary":
        hours = 24
        if len(sys.argv) > 2:
            try:
                hours = int(sys.argv[2])
            except ValueError:
                print("–û—à–∏–±–∫–∞: —á–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
        viewer.print_error_summary(hours)

    elif command == "detail":
        error_index = 0
        hours = 24

        if len(sys.argv) > 2:
            try:
                error_index = int(sys.argv[2])
            except ValueError:
                print("–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return

        if len(sys.argv) > 3:
            try:
                hours = int(sys.argv[3])
            except ValueError:
                print("–û—à–∏–±–∫–∞: —á–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return

        viewer.print_detailed_error(error_index, hours)

    elif command == "help":
        viewer.show_help()

    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        viewer.show_help()


if __name__ == "__main__":
    main()
